---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Set up a local venv-based development environment
  hosts: localhost
  connection: local
  gather_facts: yes
  tasks:
    - name: Confirm prerequisite environment variables are set
      ansible.builtin.assert:
        that: lookup('env', item.variable) | length > 0
        fail_msg: "{{ item.error_msg }}"
      loop:
        - variable: ANSIBLE_COLLECTIONS_PATH
          error_msg: "Define your development workspace target location by setting ANSIBLE_COLLECTIONS_PATH."
        - variable: VIRTUAL_ENV
          error_msg: "Activate your development virtual environment."
      tags: precheck

    - name: Ensure credential and profile paths for SSH, CDP, and cloud providers are available
      ansible.builtin.file:
        path: "{{ HOME }}/{{ item }}"
        state: directory
        force: no
      loop:
        - ".ssh"
        - ".cdp"
        - ".aws"
        - ".azure"
        - ".kube"
      vars:
        HOME: "{{ lookup('env','HOME') }}"
      tags: credentials

    - name: Add package keys and repositories for Ubuntu
      when: ansible_distribution == "Ubuntu"
      block:
        - name: Add package keys
          become: yes
          ansible.builtin.apt_key:
            url: "{{ item }}"
            state: present
          loop:
            - https://apt.releases.hashicorp.com/gpg # for terraform
            - https://packages.cloud.google.com/apt/doc/apt-key.gpg # for kubectl & google-cloud-sdk
            - https://packages.microsoft.com/keys/microsoft.asc # for azure-cli

        - name: Add package repositories
          become: yes
          ansible.builtin.apt_repository:
            repo: "{{ item.repo }}"
            filename: "{{ item.name }}"
            state: "present"
          loop:
            - name: "terraform"
              repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
            - name: "kubectl"
              repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
            - name: "google-cloud-sdk"
              repo: "deb https://packages.cloud.google.com/apt cloud-sdk main"
            - name: "azure-cli"
              repo: "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ {{ ansible_distribution_release }} main"
      tags: system

    - name: Ensure availability of system commands
      when: ansible_distribution != "MacOSX"
      block:
        - name: Install commands via package manager
          become: yes
          ansible.builtin.package:
            name:
              - pip
              - git
              - terraform
              - kubectl
              - google-cloud-sdk
              - azure-cli
            state: present

        - name: Install commands via download
          block:
            # Determine if the executable already exists in path
            - name: Check if commands are already available
              ansible.builtin.command:
                cmd: "which {{ item.exe }}"
              register: command_availability
              ignore_errors: true
              loop:
                - exe: "aws-iam-authenticator"
                  download_url: "https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator"

            # If command found not to be available download and install
            - name: Download and install any required commands (may take some time)
              become: yes
              ansible.builtin.get_url:
                url: "{{ item.item.download_url }}"
                dest: "/usr/local/bin/{{ item.item.exe }}"
                mode: 0555
              when: item.rc != 0
              loop: "{{ command_availability.results }}"

    - name: Ensure availability of system commands (MacOSX)
      when: ansible_distribution == "MacOSX"
      community.general.homebrew:
        name:
          - git
          - terraform
          - kubectl
          - aws-iam-authenticator
          #- azure-cli
        state: present
      tags: system

    - name: Ensure availability of Gcloud system commands (MacOSX)
      when: ansible_distribution == "MacOSX"
      community.general.homebrew:
        name: google-cloud-sdk
        state: present
      register: __osx_gcloud
      failed_when: not (__osx_gcloud.msg is search("already installed") or __osx_gcloud.msg is search("Update done"))
      tags: system

    - name: Clone the Cloudera automation collections
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/ansible_collections/cloudera/{{ item.collection}}"
        version: devel
      loop:
        - repo: git@github.com:cloudera-labs/cloudera.cloud.git
          collection: cloud
        - repo: git@github.com:cloudera-labs/cloudera.cluster.git
          collection: cluster
        - repo: git@github.com:cloudera-labs/cloudera.exe.git
          collection: exe
      register: __cldr_collections
      tags:
        - collections
        - roles

    - name: Parse the Cloudera automation collection dependencies
      ansible.builtin.set_fact:
        collection_dependencies: "{{ collection_dependencies | default({}) | combine(galaxy.dependencies) }}"
      vars:
        file: "{{ item }}/galaxy.yml"
        galaxy: "{{ lookup('file', file) | from_yaml }}"
      loop: "{{ __cldr_collections.results | map(attribute='invocation') | map(attribute='module_args') | map(attribute='dest') | list }}"
      tags: collections

    - name: Install the Cloudera automation collection dependencies
      community.general.ansible_galaxy_install:
        type: collection
        name: "{{ item.key }}:{{ item.value }}"
        force: true
      loop: "{{ collection_dependencies | dict2items | rejectattr('key', 'match', 'git+') | list }}"
      tags: collections

    - name: Parse the Cloudera automation standalone role dependencies
      ansible.builtin.set_fact:
        role_dependencies: "{{ role_dependencies | default([]) | union([file]) }}"
      vars:
        file: "{{ item }}/requirements.yml"
      loop: "{{ __cldr_collections.results | map(attribute='invocation') | map(attribute='module_args') | map(attribute='dest') | list }}"
      tags: roles

    - name: Install the Cloudera automation role dependencies
      community.general.ansible_galaxy_install:
        type: role
        requirements_file: "{{ item }}"
        force: true
      when: item is exists
      environment:
        ANSIBLE_ROLES_PATH: "{{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/roles"
      loop: "{{ role_dependencies }}"
      tags: roles

    - name: Install Ansible Builder
      ansible.builtin.pip:
        name: ansible-builder==1.2.0
        state: present
      tags: python

    - name: Determine the dependencies of the Ansible packages
      ansible.builtin.command:
        ansible-builder introspect --write-pip /tmp/final_python.txt --write-bindep /tmp/final_bindep.txt $ANSIBLE_COLLECTIONS_PATH
      tags: python

    - name: Install Python Dependencies
      ansible.builtin.pip:
        requirements: /tmp/final_python.txt
        state: present
      tags: python

    - name: Fix the azure-cli-core mismatch for ADAL-to-MSAL fiasco
      ansible.builtin.pip:
        name: azure-cli-core==2.30.0
        state: present
      tags: collections

    - name: Uninstall cdpy Python library
      ansible.builtin.pip:
        name: cdpy
        state: absent
      tags: cdpy

    - name: Clone the cdpy Python library project
      ansible.builtin.git:
        repo: "git@github.com:cloudera-labs/cdpy.git"
        dest: "{{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/cdpy"
        version: devel
      tags: cdpy

    - name: Install the local cdpy library
      ansible.builtin.pip:
        chdir: "{{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/cdpy"
        editable: yes
        name: .
      tags: cdpy

    - name: Create the environment setup script
      ansible.builtin.copy:
        content: |
          #!/bin/sh

          # Source this file to set up the development environment

          export ANSIBLE_COLLECTIONS_PATH={{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}
          export ANSIBLE_ROLES_PATH={{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/roles
        dest: "{{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/setup-ansible-env.sh"
        mode: 0755
      tags: coda

    - name: Print instructions
      vars:
        msg: |
          To use this local development environment for Cloudera automation,
          set the following environment variables:

            export ANSIBLE_COLLECTIONS_PATH={{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}
            export ANSIBLE_ROLES_PATH={{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/roles

          Or source the script, {{ lookup('env', 'ANSIBLE_COLLECTIONS_PATH') }}/setup-ansible-env.sh

            source {{ lookup('env', 'CLDR_DEVELOPMENT_PATH') }}/setup-cldr-devel.sh
      ansible.builtin.debug:
        msg: "{{ msg.split('\n') }}"
      tags: coda
